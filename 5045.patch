From 3857349191177e56d27628f866789eb39cd8e270 Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Fri, 13 Dec 2024 17:38:09 +0100
Subject: [PATCH] -replace use of query object when resolving ip addresses
 -grooming -should fix compile errors with Boost >= 1.87

---
 client/ClientNetworking.cpp | 177 +++++++++++++++++++-----------------
 1 file changed, 96 insertions(+), 81 deletions(-)

diff --git a/client/ClientNetworking.cpp b/client/ClientNetworking.cpp
index 1bc598e92cd..116821c3ee0 100644
--- a/client/ClientNetworking.cpp
+++ b/client/ClientNetworking.cpp
@@ -38,7 +38,10 @@ namespace std {
 #endif
 
 
+static_assert(BOOST_VERSION >= 106600); // when udp::resolver::resolve appears
+
 using boost::asio::ip::tcp;
+using boost::asio::ip::udp;
 using namespace Networking;
 
 namespace {
@@ -53,50 +56,45 @@ namespace {
         ServerDiscoverer(boost::asio::io_context& io_context) :
             m_io_context(&io_context),
             m_timer(io_context),
-            m_socket(io_context),
-            m_recv_buf(),
-            m_receive_successful(false),
-            m_server_name()
+            m_socket(io_context)
         {}
 
-        const ServerList& Servers() const
-        { return m_servers; }
+        const ServerList& Servers() const noexcept { return m_servers; }
 
         void DiscoverServers() {
             using namespace boost::asio::ip;
+            using namespace boost::asio;
             udp::resolver resolver(*m_io_context);
-            udp::resolver::query query(udp::v4(), "255.255.255.255",
-                                       std::to_string(Networking::DiscoveryPort()),
-                                       resolver_query_base::address_configured |
-                                       resolver_query_base::numeric_service);
-            udp::resolver::iterator end_it;
-            for (auto it = resolver.resolve(query); it != end_it; ++it) {
-                udp::endpoint receiver_endpoint = *it;
+            const auto results = resolver.resolve(udp::v4(), "255.255.255.255",
+                                                  std::to_string(Networking::DiscoveryPort()),
+                                                  resolver_query_base::address_configured |
+                                                  resolver_query_base::numeric_service);
 
+            for (const auto& entry : results) {
+                udp::endpoint receiver_endpoint = entry.endpoint();
                 m_socket.close();
                 m_socket.open(udp::v4());
-                m_socket.set_option(boost::asio::socket_base::broadcast(true));
+                m_socket.set_option(socket_base::broadcast(true));
 
-                m_socket.send_to(boost::asio::buffer(DISCOVERY_QUESTION),
+                m_socket.send_to(buffer(DISCOVERY_QUESTION),
                                  receiver_endpoint);
 
                 m_socket.async_receive_from(
-                    boost::asio::buffer(m_recv_buf),
+                    buffer(m_recv_buf),
                     m_sender_endpoint,
                     boost::bind(&ServerDiscoverer::HandleReceive,
                                 this,
-                                boost::asio::placeholders::error,
-                                boost::asio::placeholders::bytes_transferred));
+                                placeholders::error,
+                                placeholders::bytes_transferred));
 
                 m_timer.expires_after(std::chrono::seconds(2));
                 m_timer.async_wait(boost::bind(&ServerDiscoverer::CloseSocket, this));
                 m_io_context->run();
                 m_io_context->reset();
                 if (m_receive_successful) {
-                    boost::asio::ip::address address = m_server_name == "localhost" ?
-                        boost::asio::ip::address::from_string("127.0.0.1") :
-                        m_sender_endpoint.address();
-                    m_servers.push_back({address, m_server_name});
+                    auto address = (m_server_name == "localhost") ?
+                        address::from_string("127.0.0.1") : m_sender_endpoint.address();
+                    m_servers.emplace_back(address, m_server_name);
                 }
                 m_receive_successful = false;
                 m_server_name.clear();
@@ -128,24 +126,21 @@ namespace {
             }
         }
 
-        void CloseSocket()
-        { m_socket.close(); }
+        void CloseSocket() { m_socket.close(); }
 
-        boost::asio::io_context*            m_io_context;
+        boost::asio::io_context* const      m_io_context;
         boost::asio::high_resolution_timer  m_timer;
-        boost::asio::ip::udp::socket        m_socket;
+        udp::socket             m_socket;
 
-        std::array<char, 1024>              m_recv_buf = {};
+        std::array<char, 1024>  m_recv_buf = {};
 
-        boost::asio::ip::udp::endpoint      m_sender_endpoint;
-        bool                                m_receive_successful = false;
-        std::string                         m_server_name;
-        ServerList                          m_servers;
+        udp::endpoint           m_sender_endpoint;
+        std::string             m_server_name;
+        ServerList              m_servers;
+        bool                    m_receive_successful = false;
     };
 }
 
-
-
 class ClientNetworking::Impl {
 public:
     /** The type of list returned by a call to DiscoverLANServers(). */
@@ -207,23 +202,32 @@ class ClientNetworking::Impl {
         Remove the message from the incoming message queue. */
     boost::optional<Message> GetMessage();
 
-    /** Disconnects the client from the server. */
     void DisconnectFromServer();
 
-    /** Sets player ID for this client. */
     void SetPlayerID(int player_id);
 
-    /** Sets Host player ID. */
     void SetHostPlayerID(int host_player_id) noexcept { m_host_player_id = host_player_id; }
 
-    /** Get authorization roles access. */
     Networking::AuthRoles& AuthorizationRoles() noexcept { return m_roles; }
 
 private:
     void HandleException(const boost::system::system_error& error);
-    void HandleConnection(const boost::system::error_code& error,
-                          tcp::resolver::iterator endpoint_it);
-    void HandleResolve(const boost::system::error_code& error, tcp::resolver::iterator results);
+
+    using results_type = tcp::resolver::results_type;
+    using results_iterator = results_type::iterator;
+
+    void HandleConnection(const boost::system::error_code& error, const auto& results)
+    { HandleConnection(error, results.begin(), results.end()); }
+
+    void HandleConnection(const boost::system::error_code& error, results_iterator endpoint_it,
+                          const results_iterator end_of_endpoints_it);
+
+    void HandleResolve(const boost::system::error_code& error, const auto& results)
+    { HandleResolve(error, results.begin(), results.end()); }
+
+    void HandleResolve(const boost::system::error_code& error, const results_iterator results_it,
+                       const results_iterator end_of_endpoints_it);
+
     void HandleDeadlineTimeout(const boost::system::error_code& error);
 
     void NetworkingThread(const std::shared_ptr<const ClientNetworking> self);
@@ -244,10 +248,10 @@ class ClientNetworking::Impl {
     Networking::AuthRoles m_roles;
 
     boost::asio::io_context            m_io_context;
-    boost::asio::ip::tcp::socket       m_socket;
+    tcp::socket                        m_socket;
     boost::asio::high_resolution_timer m_deadline_timer;
     boost::asio::high_resolution_timer m_reconnect_timer;
-    tcp::resolver::iterator            m_resolver_results;
+    results_iterator                   m_resolver_results_it;
     bool                               m_deadline_has_expired = false;
 
     // m_mutex guards m_incoming_message, m_rx_connected and m_tx_connected which are written by
@@ -360,14 +364,13 @@ bool ClientNetworking::Impl::ConnectToServer(const ClientNetworking* const self,
 
     using namespace boost::asio::ip;
     tcp::resolver resolver(m_io_context);
-    tcp::resolver::query query(ip_address,
-                               std::to_string(Networking::MessagePort()),
-                               resolver_query_base::numeric_service);
 
-    // Resolve the query - will try to connect on success.
-    resolver.async_resolve(query, [this](const auto& err, const auto& results) {
-        HandleResolve(err, results); 
-    });
+    const auto resolve_handler = [this](const auto& err, tcp::resolver::results_type results)
+    { HandleResolve(err, results); };
+
+    resolver.async_resolve(ip_address, std::to_string(Networking::MessagePort()),
+                           resolver_query_base::numeric_service, resolve_handler);
+
 
     TraceLogger(network) << "ClientNetworking::Impl::ConnectToServer() - Resolving...";
     m_io_context.run_one();
@@ -465,49 +468,60 @@ boost::optional<Message> ClientNetworking::Impl::GetMessage() {
 }
 
 void ClientNetworking::Impl::HandleConnection(const boost::system::error_code& error,
-                                              tcp::resolver::iterator endpoint_it)
+                                              results_iterator endpoint_it,
+                                              const results_iterator end_of_endpoints_it)
 {
+    if (endpoint_it == end_of_endpoints_it)
+        return;
+
     DebugLogger(network) << "ClientNetworking::HandleConnection : " << endpoint_it->host_name();
+
     if (error == boost::asio::error::operation_aborted) {
         DebugLogger(network) << "ClientNetworking::HandleConnection : Operation aborted.";
         return;
-    }
-    else if (error) {
+
+    } else if (error) {
         DebugLogger(network) << "ClientNetworking::HandleConnection : connection error #"
-                             << error.value() <<" \"" << error.message() << "\""
+                             << error.value() << " \"" << error.message() << "\""
                              << "... retrying";
         m_socket.close();
         endpoint_it++;
-        if (endpoint_it == tcp::resolver::iterator())
-        {
-            endpoint_it = m_resolver_results;
-            m_reconnect_timer.expires_from_now(std::chrono::milliseconds(100));
-            m_reconnect_timer.async_wait([this, endpoint_it](const auto& err) {
+
+        if (endpoint_it == end_of_endpoints_it) {
+            endpoint_it = m_resolver_results_it;
+
+            const auto handle_connection_deadlined =
+                [this, endpoint_it, end_of_endpoints_it](const auto& error)
+            {
                 // If the m_deadline_timer has expired, it will try to cancel
                 // this timer and set the m_deadline_has_expired flag.
                 // If expiry of both timers is sufficiently close together
                 // this callback may have already been scheduled and this timer
                 // can no longer be canceled - so need to check the flag here.
-                if (err == boost::asio::error::operation_aborted
-                    || m_deadline_has_expired)
-                {
+                if (error == boost::asio::error::operation_aborted || m_deadline_has_expired) {
                     TraceLogger(network) << "ClientNetworking::Impl::m_reconnect_timer::async_wait - Canceling reconnect attempts due to deadline timeout";
                     return;
-
                 }
+
                 TraceLogger(network) << "ClientNetworking::Impl::m_reconnect_timer::async_wait - Scheduling another connection attempt";
-                m_socket.async_connect(*endpoint_it, [this, endpoint_it](const auto& error) {
-                    HandleConnection(error, endpoint_it);
-                });
-            });
+                const auto handle_connection = [this, endpoint_it, end_of_endpoints_it](const auto& error)
+                { HandleConnection(error, endpoint_it, end_of_endpoints_it); };
+
+                m_socket.async_connect(*endpoint_it, handle_connection);
+            };
+
+            m_reconnect_timer.expires_from_now(std::chrono::milliseconds(100));
+            m_reconnect_timer.async_wait(handle_connection_deadlined);
+
         } else {
-            m_socket.async_connect(*endpoint_it, [this, endpoint_it](const auto& error) {
-                HandleConnection(error, endpoint_it);
-            });
+            const auto handle_connection = [this, endpoint_it, end_of_endpoints_it](const auto& error)
+            { HandleConnection(error, endpoint_it, end_of_endpoints_it); };
+
+            m_socket.async_connect(*endpoint_it, handle_connection);
         }
     } else {
         m_deadline_timer.cancel();
-        const auto& endpoint = endpoint_it->endpoint();
+        const auto endpoint = endpoint_it->endpoint();
         InfoLogger(network) << "Connected to server at " << endpoint.address() << ":" << endpoint.port();
         std::scoped_lock lock(m_mutex);
         m_rx_connected = true;
@@ -515,8 +529,8 @@ void ClientNetworking::Impl::HandleConnection(const boost::system::error_code& e
     }
 }
 
-void ClientNetworking::Impl::HandleResolve(const boost::system::error_code& error, 
-                                           tcp::resolver::iterator results)
+void ClientNetworking::Impl::HandleResolve(const boost::system::error_code& error,
+                                           const results_iterator results_it, results_iterator results_end_it)
 {
     TraceLogger(network) << "ClientNetworking::Impl::HandleResolve(" << error << ")";
     if (error) {
@@ -525,20 +539,21 @@ void ClientNetworking::Impl::HandleResolve(const boost::system::error_code& erro
         return;
     }
 
-    m_resolver_results = results;
+    m_resolver_results_it = results_it;
 
     DebugLogger(network) << "Attempt to connect to server at one of these addresses:";
-    tcp::resolver::iterator end_it;
-    for (tcp::resolver::iterator it = results; it != end_it; ++it) {
+
+    for (auto it = results_it; it != results_end_it; ++it) {
         DebugLogger(network) << "host_name: " << it->host_name()
-            << "  address: " << it->endpoint().address()
-            << "  port: " << it->endpoint().port();
+                             << "  address: " << it->endpoint().address()
+                             << "  port: " << it->endpoint().port();
     }
 
     m_socket.close();
-    m_socket.async_connect(*results, [this, results](const auto& error) {
-        HandleConnection(error, results); 
-    });
+    const auto handle_connection = [this, results_it, results_end_it](const auto& error)
+    { HandleConnection(error, results_it, results_end_it); };
+    m_socket.async_connect(*results_it, handle_connection);
+
     TraceLogger(network) << "Return from ClientNetworking::Impl::HandleResolve()";
 }
 
@@ -724,7 +739,7 @@ void ClientNetworking::Impl::DisconnectFromServerImpl() {
 
     // Note: m_socket.is_open() may be independently true/false on each of these checks.
     if (m_socket.is_open())
-        m_socket.shutdown(boost::asio::ip::tcp::socket::shutdown_both);
+        m_socket.shutdown(tcp::socket::shutdown_both);
 }
 
 
