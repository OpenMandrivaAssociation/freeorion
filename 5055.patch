From 963e6b30f6738611c84eba54f77a5e9169f87085 Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sat, 28 Dec 2024 01:27:23 +0100
Subject: [PATCH] remove text combining inner loop while iterating over regex
 matches of parsed text, which probably was leading to an invalid iterator
 dereference

---
 GG/src/Font.cpp | 29 +++++------------------------
 1 file changed, 5 insertions(+), 24 deletions(-)

diff --git a/GG/src/Font.cpp b/GG/src/Font.cpp
index 83f78c7dd6a..8cbbb2f1cee 100644
--- a/GG/src/Font.cpp
+++ b/GG/src/Font.cpp
@@ -2744,31 +2744,15 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
     // Fetch and use the regular expression from the TagHandler which parses all the known XML tags.
     const sregex& regex = tag_handler.Regex(text, ignore_tags);
     sregex_iterator it(text.begin(), text.end(), regex);
-
     const sregex_iterator end_it;
-    while (it != end_it)
-    {
-        // Consolidate adjacent blocks of text.
-        // If adjacent found substrings are all text, merge them into a single Substring.
-        bool need_increment = true;
-        Substring combined_text;
-        sub_match<std::string::const_iterator> const* text_match;
-        while (it != end_it &&
-               (text_match = &(*it)[text_tag_idx]) &&
-               text_match->matched)
-        {
-            need_increment = false;
-            if (combined_text.empty())
-                combined_text = Substring(text, *text_match);
-            else
-                combined_text += *text_match;
-            ++it;
-        }
 
+    for (; it != end_it; ++it) {
         const auto& it_elem = *it;
 
-        if (!combined_text.empty()) {
-            text_elements.emplace_back(combined_text); // Basic text element.
+        if (it_elem[text_tag_idx].matched) {
+            auto matched_text = Substring(text, it_elem[text_tag_idx]);
+            if (!matched_text.empty())
+                text_elements.emplace_back(matched_text); // Basic text element.
 
         } else if (it_elem[open_bracket_tag_idx].matched) {
             // Open XML tag.
@@ -2808,9 +2792,6 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
             if (last_char == '\n' || last_char == '\f' || last_char == '\r')
                 text_elements.emplace_back(NEWLINE);
         }
-
-        if (need_increment)
-            ++it;
     }
 
     // fill in the widths of code points in each TextElement
