From d0055cbc7d96f05c587a709f983724c5c7505b73 Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sat, 21 Dec 2024 21:58:50 +0100
Subject: [PATCH 1/5] add Font text parsing tests

---
 UI/CUIWnd.cpp | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)

diff --git a/UI/CUIWnd.cpp b/UI/CUIWnd.cpp
index c7f889982de..c5b176b8dd9 100644
--- a/UI/CUIWnd.cpp
+++ b/UI/CUIWnd.cpp
@@ -123,6 +123,40 @@ namespace {
         std::string::size_type name_len = mode_substr_pos - prefix_len;
         return option_name.substr(prefix_len, name_len);
     }
+
+    std::string_view to_string(GG::Font::TextElement::TextElementType t) {
+        switch (t) {
+        case GG::Font::TextElement::TextElementType::OPEN_TAG: return "opentag";
+        case GG::Font::TextElement::TextElementType::CLOSE_TAG: return "closetag";
+        case GG::Font::TextElement::TextElementType::TEXT: return "text";
+        case GG::Font::TextElement::TextElementType::WHITESPACE: return "ws";
+        case GG::Font::TextElement::TextElementType::NEWLINE: return "newline";
+        default: return "???";
+        }
+    }
+
+    void TestParse(std::string text, const GG::Font& font) {
+        auto parse_results1 = font.ExpensiveParseFromTextToTextElements(text, GG::FORMAT_LEFT);
+        std::cout << "text: \"" << text << "\"\n . parsed as:  " << std::flush << [&]() {
+            std::string retval;
+            for (const auto& res : parse_results1) {
+                retval += "\n ... ";
+                retval += to_string(res.Type());
+                retval += ": \"" + std::string(res.text) + "\"  ";
+            }
+            return retval;
+            }() << "\n\n";
+    }
+
+    bool TestFontParseLogResults() {
+        const auto font = ClientUI::GetFont();
+        TestParse("some simple text", *font);
+        TestParse("", *font);
+        TestParse("line1\nline2\n\nline4\n", *font);
+        TestParse("plain<i>ital</i><u>", *font);
+
+        return true;
+    }
 }
 
 
@@ -156,6 +190,9 @@ CUIWnd::CUIWnd(std::string wnd_name, GG::Flags<GG::WndFlag> flags,
 
 void CUIWnd::CompleteConstruction() {
     GG::Wnd::CompleteConstruction();
+
+    static const bool dummy = TestFontParseLogResults();
+
     Init();
     ValidatePosition();
     SetDefaultedOptions();

From 8adcd6e22ade7002327e0c1bae09e48822b3ef18 Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sun, 22 Dec 2024 17:40:16 +0100
Subject: [PATCH 2/5] use a getter with static TagHandler instead of file-scope
 object

---
 GG/src/Font.cpp | 20 ++++++++++++--------
 1 file changed, 12 insertions(+), 8 deletions(-)

diff --git a/GG/src/Font.cpp b/GG/src/Font.cpp
index a4004ec6e67..0dbcad0a1a5 100644
--- a/GG/src/Font.cpp
+++ b/GG/src/Font.cpp
@@ -1844,7 +1844,11 @@ namespace {
         CompiledRegex<TagHandler> m_regex_w_tags;
     };
 
-    TagHandler tag_handler{};
+    TagHandler& GetTagHandler()
+    { 
+        static TagHandler tag_handler{};
+        return tag_handler;
+    }
 }
 
 
@@ -2070,7 +2074,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add an open tag iff it exists as a recognized tag.*/
     void AddOpenTag(std::string_view tag)
     {
-        if (!tag_handler.IsKnown(tag))
+        if (!GetTagHandler().IsKnown(tag))
             return;
 
         // Create open tag like "<tag>" with no parameters
@@ -2087,7 +2091,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add an open tag iff it exists as a recognized tag.*/
     void AddOpenTag(std::string_view tag, const std::vector<std::string>& params)
     {
-        if (!tag_handler.IsKnown(tag))
+        if (!GetTagHandler().IsKnown(tag))
             return;
 
         const auto tag_begin = m_text.size();
@@ -2117,7 +2121,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add a close tag iff it exists as a recognized tag.*/
     void AddCloseTag(std::string_view tag)
     {
-        if (!tag_handler.IsKnown(tag))
+        if (!GetTagHandler().IsKnown(tag))
             return;
 
         // Create a close tag that looks like "</tag>"
@@ -2615,8 +2619,8 @@ void Font::ProcessTags(const LineVec& line_data, RenderState& render_state)
 std::string Font::StripTags(std::string_view text)
 {
     using namespace boost::xpressive;
-    std::string text_str{text}; // temporary until tag_handler.Regex returns a cregex
-    auto& regex = tag_handler.Regex(text_str, false);
+    std::string text_str{text}; // temporary until GetTagHandler().Regex returns a cregex
+    auto& regex = GetTagHandler().Regex(text_str, false);
 
     std::string retval;
     retval.reserve(text.size());
@@ -2652,7 +2656,7 @@ Pt Font::TextExtent(const LineVec& line_data) const noexcept
 }
 
 void Font::RegisterKnownTags(std::vector<std::string_view> tags)
-{ tag_handler.Insert(std::move(tags)); }
+{ GetTagHandler().Insert(std::move(tags)); }
 
 void Font::ThrowBadGlyph(const std::string& format_str, uint32_t c)
 {
@@ -2754,7 +2758,7 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
     const bool ignore_tags = format & FORMAT_IGNORETAGS;
 
     // Fetch and use the regular expression from the TagHandler which parses all the known XML tags.
-    const sregex& regex = tag_handler.Regex(text, ignore_tags);
+    const sregex& regex = GetTagHandler().Regex(text, ignore_tags);
     sregex_iterator it(text.begin(), text.end(), regex);
 
     const sregex_iterator end_it;

From 3a307d82e6e2a0ba9fe4e5c9f14169529a0d89fb Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sun, 22 Dec 2024 17:58:02 +0100
Subject: [PATCH 3/5] more ExpensiveParseFromTextToTextElements debugging
 output

---
 GG/src/Font.cpp | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/GG/src/Font.cpp b/GG/src/Font.cpp
index 0dbcad0a1a5..46ecf1af16c 100644
--- a/GG/src/Font.cpp
+++ b/GG/src/Font.cpp
@@ -2742,6 +2742,12 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
 {
     std::vector<TextElement> text_elements;
 
+    std::cout << "In Font::ExpensiveParseFromTextToTextElements" << std::flush;
+    std::cout << " text: " << text << std::flush;
+    std::cout << " format: " << format << std::flush;
+    std::cout << " glyphs sz: " << glyphs.size() << std::flush;
+    std::cout << " space width: " << static_cast<int>(space_width) << std::endl;
+
     using namespace boost::xpressive;
 #if defined(__cpp_using_enum)
     using enum TextElement::TextElementType;
@@ -2755,13 +2761,20 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
     if (text.empty())
         return text_elements;
 
+    std::cout << " ... text not empty" << std::endl;
+
     const bool ignore_tags = format & FORMAT_IGNORETAGS;
 
     // Fetch and use the regular expression from the TagHandler which parses all the known XML tags.
     const sregex& regex = GetTagHandler().Regex(text, ignore_tags);
+    std::cout << " ... got regex id: " << regex.regex_id() << std::endl;
+
     sregex_iterator it(text.begin(), text.end(), regex);
+    std::cout << " ... got regex iterator " << std::endl;
 
     const sregex_iterator end_it;
+    std::cout << " ... it == end_it ?: " << std::flush << (it == end_it) << std::endl;
+
     while (it != end_it)
     {
         // Consolidate adjacent blocks of text.

From f497effda00c4fdd5bc15aa59aeac58e19750e41 Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sun, 22 Dec 2024 18:59:06 +0100
Subject: [PATCH 4/5] simplify and separate ComplexRegex and TagHandler classes

---
 GG/src/Font.cpp | 105 ++++++++++++++++++++----------------------------
 1 file changed, 44 insertions(+), 61 deletions(-)

diff --git a/GG/src/Font.cpp b/GG/src/Font.cpp
index 46ecf1af16c..15275970a4a 100644
--- a/GG/src/Font.cpp
+++ b/GG/src/Font.cpp
@@ -1716,17 +1716,44 @@ namespace {
     constexpr std::size_t text_tag_idx = 5;
 
 
+
+
+    /** TagHandler stores a set of all known tags and provides pre-compiled regexs for those tags.
+
+    Known tags are tags that will be parsed into TextElement OPEN_TAG or CLOSE_TAG. */
+    class TagHandler {
+    public:
+        /** Add a tag to the set of known tags.*/
+        void Insert(std::vector<std::string_view> tags)
+        {
+            std::copy_if(tags.begin(), tags.end(), std::back_inserter(m_custom_tags),
+                         [this](const auto tag) { return !IsKnown(tag); });
+        }
+
+        bool IsKnown(std::string_view tag) const
+        {
+            const auto matches_tag = [tag](const auto sv) noexcept{ return sv == tag; };
+            return std::any_of(m_default_tags.begin(), m_default_tags.end(), matches_tag)
+                || std::any_of(m_custom_tags.begin(), m_custom_tags.end(), matches_tag);
+        }
+
+    private:
+        // set of tags known to the handler
+        static constexpr std::array<std::string_view, 11> m_default_tags{
+            {Font::ITALIC_TAG, Font::SHADOW_TAG, Font::UNDERLINE_TAG, Font::SUPERSCRIPT_TAG, Font::SUBSCRIPT_TAG,
+            Font::RGBA_TAG, Font::ALIGN_LEFT_TAG, Font::ALIGN_CENTER_TAG, Font::ALIGN_RIGHT_TAG, Font::PRE_TAG, Font::RESET_TAG}};
+
+        std::vector<std::string_view> m_custom_tags;
+    } tag_handler;
     namespace xpr = boost::xpressive;
 
     /** CompiledRegex maintains a compiled boost::xpressive regular
         expression that includes a tag stack which can be cleared and
         provided to callers without the overhead of recompiling the
         regular expression.*/
-    template <typename TagHandlerT>
     class CompiledRegex {
     public:
-        CompiledRegex(const TagHandlerT& tag_handler_in) :
-            m_tag_handler(tag_handler_in)
+        CompiledRegex()
         {
             // Synonyms for s1 thru s5 sub matches
             xpr::mark_tag tag_name_tag(tag_name_tag_idx);
@@ -1788,7 +1815,7 @@ namespace {
 
     private:
         bool MatchesKnownTag(const boost::xpressive::ssub_match& sub) const
-        { return !m_ignore_tags && m_tag_handler.IsKnown(sub.str()); }
+        { return !m_ignore_tags && tag_handler.IsKnown(sub.str()); }
 
         bool NotPreformatted(const boost::xpressive::ssub_match&) const noexcept
         { return !m_preformatted; }
@@ -1796,59 +1823,14 @@ namespace {
         bool NotPreformattedOrIsPre(const boost::xpressive::ssub_match& sub) const
         { return !m_preformatted || sub.str() == Font::PRE_TAG; }
 
-        const std::string* m_text = nullptr;
-        const TagHandlerT& m_tag_handler;
-        bool m_ignore_tags = false;
-        bool m_preformatted = false;
+        const std::string*  m_text = nullptr;
 
         // The combined regular expression.
-        xpr::sregex m_EVERYTHING;
-    };
+        xpr::sregex         m_EVERYTHING;
 
-    /** TagHandler stores a set of all known tags and provides pre-compiled regexs for those tags.
-
-     Known tags are tags that will be parsed into TextElement OPEN_TAG or CLOSE_TAG. */
-    class TagHandler {
-    public:
-        TagHandler() :
-            m_regex_w_tags(*this)
-        {}
-
-        /** Add a tag to the set of known tags.*/
-        void Insert(std::vector<std::string_view> tags)
-        {
-            std::copy_if(tags.begin(), tags.end(), std::back_inserter(m_custom_tags),
-                         [this](const auto tag) { return !IsKnown(tag); });
-        }
-
-        bool IsKnown(std::string_view tag) const
-        {
-            const auto matches_tag = [tag](const auto sv) noexcept{ return sv == tag; };
-            return std::any_of(m_default_tags.begin(), m_default_tags.end(), matches_tag)
-                || std::any_of(m_custom_tags.begin(), m_custom_tags.end(), matches_tag);
-        }
-
-        // Return a regex bound to \p text using the currently known
-        // tags.  If required \p ignore_tags and/or \p strip_unpaired_tags.
-        xpr::sregex& Regex(const std::string& text, bool ignore_tags)
-        { return m_regex_w_tags.BindRegexToText(text, ignore_tags); }
-
-    private:
-        // set of tags known to the handler
-        static constexpr std::array<std::string_view, 11> m_default_tags{
-            {Font::ITALIC_TAG, Font::SHADOW_TAG, Font::UNDERLINE_TAG, Font::SUPERSCRIPT_TAG, Font::SUBSCRIPT_TAG,
-             Font::RGBA_TAG, Font::ALIGN_LEFT_TAG, Font::ALIGN_CENTER_TAG, Font::ALIGN_RIGHT_TAG, Font::PRE_TAG, Font::RESET_TAG}};
-
-        std::vector<std::string_view> m_custom_tags;
-
-        CompiledRegex<TagHandler> m_regex_w_tags;
-    };
-
-    TagHandler& GetTagHandler()
-    { 
-        static TagHandler tag_handler{};
-        return tag_handler;
-    }
+        bool                m_ignore_tags = false;
+        bool                m_preformatted = false;
+    } regex_with_tags;
 }
 
 
@@ -2074,7 +2056,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add an open tag iff it exists as a recognized tag.*/
     void AddOpenTag(std::string_view tag)
     {
-        if (!GetTagHandler().IsKnown(tag))
+        if (!tag_handler.IsKnown(tag))
             return;
 
         // Create open tag like "<tag>" with no parameters
@@ -2091,7 +2073,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add an open tag iff it exists as a recognized tag.*/
     void AddOpenTag(std::string_view tag, const std::vector<std::string>& params)
     {
-        if (!GetTagHandler().IsKnown(tag))
+        if (!tag_handler.IsKnown(tag))
             return;
 
         const auto tag_begin = m_text.size();
@@ -2121,7 +2103,7 @@ class Font::TextAndElementsAssembler::Impl
     /** Add a close tag iff it exists as a recognized tag.*/
     void AddCloseTag(std::string_view tag)
     {
-        if (!GetTagHandler().IsKnown(tag))
+        if (!tag_handler.IsKnown(tag))
             return;
 
         // Create a close tag that looks like "</tag>"
@@ -2619,8 +2601,9 @@ void Font::ProcessTags(const LineVec& line_data, RenderState& render_state)
 std::string Font::StripTags(std::string_view text)
 {
     using namespace boost::xpressive;
-    std::string text_str{text}; // temporary until GetTagHandler().Regex returns a cregex
-    auto& regex = GetTagHandler().Regex(text_str, false);
+    std::string text_str{text};
+
+    auto& regex = regex_with_tags.BindRegexToText(text_str, false);
 
     std::string retval;
     retval.reserve(text.size());
@@ -2656,7 +2639,7 @@ Pt Font::TextExtent(const LineVec& line_data) const noexcept
 }
 
 void Font::RegisterKnownTags(std::vector<std::string_view> tags)
-{ GetTagHandler().Insert(std::move(tags)); }
+{ tag_handler.Insert(std::move(tags)); }
 
 void Font::ThrowBadGlyph(const std::string& format_str, uint32_t c)
 {
@@ -2766,7 +2749,7 @@ Font::ExpensiveParseFromTextToTextElements(const std::string& text, const Flags<
     const bool ignore_tags = format & FORMAT_IGNORETAGS;
 
     // Fetch and use the regular expression from the TagHandler which parses all the known XML tags.
-    const sregex& regex = GetTagHandler().Regex(text, ignore_tags);
+    const sregex& regex = regex_with_tags.BindRegexToText(text, ignore_tags);
     std::cout << " ... got regex id: " << regex.regex_id() << std::endl;
 
     sregex_iterator it(text.begin(), text.end(), regex);

From 9e897f80641ee00cde1959539e6dd4ecd641308d Mon Sep 17 00:00:00 2001
From: geoffthemedio <geoffthemedio@gmail.com>
Date: Sun, 22 Dec 2024 19:06:19 +0100
Subject: [PATCH 5/5] debug output on construction

---
 GG/src/Font.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/GG/src/Font.cpp b/GG/src/Font.cpp
index 15275970a4a..522a2c5416b 100644
--- a/GG/src/Font.cpp
+++ b/GG/src/Font.cpp
@@ -1723,6 +1723,9 @@ namespace {
     Known tags are tags that will be parsed into TextElement OPEN_TAG or CLOSE_TAG. */
     class TagHandler {
     public:
+        TagHandler()
+        { std::cout << "TagHandler Init" << std::endl; }
+
         /** Add a tag to the set of known tags.*/
         void Insert(std::vector<std::string_view> tags)
         {
@@ -1755,6 +1758,8 @@ namespace {
     public:
         CompiledRegex()
         {
+            std::cout << "CompiledRegex Init" << std::endl;
+
             // Synonyms for s1 thru s5 sub matches
             xpr::mark_tag tag_name_tag(tag_name_tag_idx);
             xpr::mark_tag open_bracket_tag(open_bracket_tag_idx);
